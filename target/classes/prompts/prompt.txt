

Instructions to AI:

For each user story, analyze the role → goal → value.

Assign exactly one problem ID per story, following this priority order:
1 → 3 → 2 → 4 → 5 → 6 → 0

Output a JSON object with a top-level results array. Each entry must include:

us_id → the story’s unique identifier

estimated_problem_id → problem ID (0–6)

corrected_us → concise, clear, rewritten user story that fixes the identified problem

optional_explanation → brief reasoning behind the classification

Problem Definitions

ID 1 – Conflate Problems with Solutions (Priority 1)

Goal specifies a technical solution rather than the underlying user need.

Corrected story focuses on user goal and value, not technical implementation.

ID 3 – Ultra-huge Story (Priority 2)

Story contains multiple unrelated actions, “and/or” phrases, or spans a large workflow.

Corrected story should be smaller and atomic.

ID 2 – Misplaced Requirements (Priority 3)

Value contains another feature or workflow step instead of rationale.

Corrected story should move rationale to the value and remove extra requirements.

ID 4 – Technical User Story (Priority 4)

Value describes only technical capability, with no user-facing benefit.

Corrected story should highlight the user benefit.

ID 5 – Poorly Defined User Roles (Priority 5)

Role is vague, generic, or duplicated.

Corrected story should clarify the role as a specific persona.

ID 6 – Parakeet Value (Priority 6)

Value simply repeats the goal.

Corrected story should express a distinct benefit or rationale.

ID 0 – No Problem (Priority 7 / Default)

Role is clear, goal is user-facing, value is distinct, story is atomic.

Output Format Example

"""{
  "results": [
    {
      "us_id": "US1",
      "estimated_problem_id": 1,
      "corrected_us": "As a Manny’s food service customer, I want to quickly identify food item types so that I can distinguish meats, grains, and vegetables at a glance.",
      "optional_explanation": "The original goal specified RGB values, which is a technical solution. Corrected story focuses on the underlying user goal."
    }
  ]
}"""

nternal Red-Flag Checklist for AI

Use this as an internal reasoning tool only; do not output directly.

ID1 (Conflate Problems with Solutions) Red Flags:

RGB, HEX, CMYK, HSL color codes

Inline CSS, pixel values, font names

Dropdowns, sliders, checkboxes, autocomplete, API search

Authentication protocols: OAuth, SAML, JWT

Frameworks: React, Angular, Vue, Flutter, Bootstrap, Tailwind

Databases & schema: PostgreSQL, MySQL, MongoDB, Redis, table names

Cloud / DevOps: AWS, Azure, GCP, Docker, Lambda, Kubernetes, serverless

ID3 (Ultra-huge Story) Red Flags:

Multiple unrelated goals or actions

“And/or” phrases

Full workflows bundled in a single story

ID2 (Misplaced Requirements) Red Flags:

Value contains another feature, workflow step, or requirement instead of rationale

ID4 (Technical User Story) Red Flags:

Value describes technical capability only

No user-facing benefit mentioned

ID5 (Poorly Defined Roles) Red Flags:

Role is generic: “user,” “business user,” “administrator,” “system”

ID6 (Parakeet Value) Red Flags:

Value repeats the goal verbatim

No new rationale or benefit added

Usage: Apply these checks internally during reasoning to decide which ID fits best.

Notes for AI

Always reason step by step: identify role → goal → value before classifying.

Apply priority order strictly. First match wins.

Output only the JSON object — no commentary outside the results array.

corrected_us should resolve the identified problem while remaining concise and user-focused.